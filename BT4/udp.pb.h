// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: udp.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_udp_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_udp_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_udp_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_udp_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_udp_2eproto;
namespace BTL {
class ClientInfo;
class ClientInfoDefaultTypeInternal;
extern ClientInfoDefaultTypeInternal _ClientInfo_default_instance_;
class FileCache;
class FileCacheDefaultTypeInternal;
extern FileCacheDefaultTypeInternal _FileCache_default_instance_;
class FileData;
class FileDataDefaultTypeInternal;
extern FileDataDefaultTypeInternal _FileData_default_instance_;
class FileInfo;
class FileInfoDefaultTypeInternal;
extern FileInfoDefaultTypeInternal _FileInfo_default_instance_;
class HostInfo;
class HostInfoDefaultTypeInternal;
extern HostInfoDefaultTypeInternal _HostInfo_default_instance_;
class ListFile;
class ListFileDefaultTypeInternal;
extern ListFileDefaultTypeInternal _ListFile_default_instance_;
class MessageType;
class MessageTypeDefaultTypeInternal;
extern MessageTypeDefaultTypeInternal _MessageType_default_instance_;
}  // namespace BTL
PROTOBUF_NAMESPACE_OPEN
template<> ::BTL::ClientInfo* Arena::CreateMaybeMessage<::BTL::ClientInfo>(Arena*);
template<> ::BTL::FileCache* Arena::CreateMaybeMessage<::BTL::FileCache>(Arena*);
template<> ::BTL::FileData* Arena::CreateMaybeMessage<::BTL::FileData>(Arena*);
template<> ::BTL::FileInfo* Arena::CreateMaybeMessage<::BTL::FileInfo>(Arena*);
template<> ::BTL::HostInfo* Arena::CreateMaybeMessage<::BTL::HostInfo>(Arena*);
template<> ::BTL::ListFile* Arena::CreateMaybeMessage<::BTL::ListFile>(Arena*);
template<> ::BTL::MessageType* Arena::CreateMaybeMessage<::BTL::MessageType>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace BTL {

enum MessageType_Message : int {
  MessageType_Message_HOSTINFO = 0,
  MessageType_Message_CLIENTINFO = 1,
  MessageType_Message_FILEINFO = 2,
  MessageType_Message_FILEDATA = 3,
  MessageType_Message_FILECACHE = 4,
  MessageType_Message_LISTFILE = 5,
  MessageType_Message_MessageType_Message_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MessageType_Message_MessageType_Message_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MessageType_Message_IsValid(int value);
constexpr MessageType_Message MessageType_Message_Message_MIN = MessageType_Message_HOSTINFO;
constexpr MessageType_Message MessageType_Message_Message_MAX = MessageType_Message_LISTFILE;
constexpr int MessageType_Message_Message_ARRAYSIZE = MessageType_Message_Message_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_Message_descriptor();
template<typename T>
inline const std::string& MessageType_Message_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageType_Message>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageType_Message_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageType_Message_descriptor(), enum_t_value);
}
inline bool MessageType_Message_Parse(
    const std::string& name, MessageType_Message* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageType_Message>(
    MessageType_Message_descriptor(), name, value);
}
// ===================================================================

class MessageType :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BTL.MessageType) */ {
 public:
  MessageType();
  virtual ~MessageType();

  MessageType(const MessageType& from);
  MessageType(MessageType&& from) noexcept
    : MessageType() {
    *this = ::std::move(from);
  }

  inline MessageType& operator=(const MessageType& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageType& operator=(MessageType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageType* internal_default_instance() {
    return reinterpret_cast<const MessageType*>(
               &_MessageType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MessageType& a, MessageType& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageType* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageType* New() const final {
    return CreateMaybeMessage<MessageType>(nullptr);
  }

  MessageType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageType& from);
  void MergeFrom(const MessageType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BTL.MessageType";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_udp_2eproto);
    return ::descriptor_table_udp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MessageType_Message Message;
  static constexpr Message HOSTINFO =
    MessageType_Message_HOSTINFO;
  static constexpr Message CLIENTINFO =
    MessageType_Message_CLIENTINFO;
  static constexpr Message FILEINFO =
    MessageType_Message_FILEINFO;
  static constexpr Message FILEDATA =
    MessageType_Message_FILEDATA;
  static constexpr Message FILECACHE =
    MessageType_Message_FILECACHE;
  static constexpr Message LISTFILE =
    MessageType_Message_LISTFILE;
  static inline bool Message_IsValid(int value) {
    return MessageType_Message_IsValid(value);
  }
  static constexpr Message Message_MIN =
    MessageType_Message_Message_MIN;
  static constexpr Message Message_MAX =
    MessageType_Message_Message_MAX;
  static constexpr int Message_ARRAYSIZE =
    MessageType_Message_Message_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Message_descriptor() {
    return MessageType_Message_descriptor();
  }
  template<typename T>
  static inline const std::string& Message_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Message>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Message_Name.");
    return MessageType_Message_Name(enum_t_value);
  }
  static inline bool Message_Parse(const std::string& name,
      Message* value) {
    return MessageType_Message_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kLocalPortFieldNumber = 2,
  };
  // .BTL.MessageType.Message message = 1;
  void clear_message();
  ::BTL::MessageType_Message message() const;
  void set_message(::BTL::MessageType_Message value);
  private:
  ::BTL::MessageType_Message _internal_message() const;
  void _internal_set_message(::BTL::MessageType_Message value);
  public:

  // uint32 localPort = 2;
  void clear_localport();
  ::PROTOBUF_NAMESPACE_ID::uint32 localport() const;
  void set_localport(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_localport() const;
  void _internal_set_localport(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:BTL.MessageType)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int message_;
  ::PROTOBUF_NAMESPACE_ID::uint32 localport_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_udp_2eproto;
};
// -------------------------------------------------------------------

class HostInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BTL.HostInfo) */ {
 public:
  HostInfo();
  virtual ~HostInfo();

  HostInfo(const HostInfo& from);
  HostInfo(HostInfo&& from) noexcept
    : HostInfo() {
    *this = ::std::move(from);
  }

  inline HostInfo& operator=(const HostInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostInfo& operator=(HostInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HostInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HostInfo* internal_default_instance() {
    return reinterpret_cast<const HostInfo*>(
               &_HostInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HostInfo& a, HostInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(HostInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HostInfo* New() const final {
    return CreateMaybeMessage<HostInfo>(nullptr);
  }

  HostInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HostInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HostInfo& from);
  void MergeFrom(const HostInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BTL.HostInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_udp_2eproto);
    return ::descriptor_table_udp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostFieldNumber = 1,
    kPortFieldNumber = 2,
    kIsSenderFieldNumber = 3,
  };
  // string host = 1;
  void clear_host();
  const std::string& host() const;
  void set_host(const std::string& value);
  void set_host(std::string&& value);
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  std::string* mutable_host();
  std::string* release_host();
  void set_allocated_host(std::string* host);
  private:
  const std::string& _internal_host() const;
  void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // uint32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool isSender = 3;
  void clear_issender();
  bool issender() const;
  void set_issender(bool value);
  private:
  bool _internal_issender() const;
  void _internal_set_issender(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BTL.HostInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  bool issender_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_udp_2eproto;
};
// -------------------------------------------------------------------

class ClientInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BTL.ClientInfo) */ {
 public:
  ClientInfo();
  virtual ~ClientInfo();

  ClientInfo(const ClientInfo& from);
  ClientInfo(ClientInfo&& from) noexcept
    : ClientInfo() {
    *this = ::std::move(from);
  }

  inline ClientInfo& operator=(const ClientInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientInfo& operator=(ClientInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientInfo* internal_default_instance() {
    return reinterpret_cast<const ClientInfo*>(
               &_ClientInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ClientInfo& a, ClientInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientInfo* New() const final {
    return CreateMaybeMessage<ClientInfo>(nullptr);
  }

  ClientInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientInfo& from);
  void MergeFrom(const ClientInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BTL.ClientInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_udp_2eproto);
    return ::descriptor_table_udp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeersFieldNumber = 4,
    kRemoteHostFieldNumber = 1,
    kLocalPortFieldNumber = 2,
    kIsSenderFieldNumber = 3,
  };
  // repeated .BTL.HostInfo peers = 4;
  int peers_size() const;
  private:
  int _internal_peers_size() const;
  public:
  void clear_peers();
  ::BTL::HostInfo* mutable_peers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BTL::HostInfo >*
      mutable_peers();
  private:
  const ::BTL::HostInfo& _internal_peers(int index) const;
  ::BTL::HostInfo* _internal_add_peers();
  public:
  const ::BTL::HostInfo& peers(int index) const;
  ::BTL::HostInfo* add_peers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BTL::HostInfo >&
      peers() const;

  // string remoteHost = 1;
  void clear_remotehost();
  const std::string& remotehost() const;
  void set_remotehost(const std::string& value);
  void set_remotehost(std::string&& value);
  void set_remotehost(const char* value);
  void set_remotehost(const char* value, size_t size);
  std::string* mutable_remotehost();
  std::string* release_remotehost();
  void set_allocated_remotehost(std::string* remotehost);
  private:
  const std::string& _internal_remotehost() const;
  void _internal_set_remotehost(const std::string& value);
  std::string* _internal_mutable_remotehost();
  public:

  // uint32 localPort = 2;
  void clear_localport();
  ::PROTOBUF_NAMESPACE_ID::uint32 localport() const;
  void set_localport(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_localport() const;
  void _internal_set_localport(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool isSender = 3;
  void clear_issender();
  bool issender() const;
  void set_issender(bool value);
  private:
  bool _internal_issender() const;
  void _internal_set_issender(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BTL.ClientInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BTL::HostInfo > peers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remotehost_;
  ::PROTOBUF_NAMESPACE_ID::uint32 localport_;
  bool issender_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_udp_2eproto;
};
// -------------------------------------------------------------------

class FileInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BTL.FileInfo) */ {
 public:
  FileInfo();
  virtual ~FileInfo();

  FileInfo(const FileInfo& from);
  FileInfo(FileInfo&& from) noexcept
    : FileInfo() {
    *this = ::std::move(from);
  }

  inline FileInfo& operator=(const FileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileInfo& operator=(FileInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileInfo* internal_default_instance() {
    return reinterpret_cast<const FileInfo*>(
               &_FileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FileInfo& a, FileInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FileInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileInfo* New() const final {
    return CreateMaybeMessage<FileInfo>(nullptr);
  }

  FileInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileInfo& from);
  void MergeFrom(const FileInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BTL.FileInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_udp_2eproto);
    return ::descriptor_table_udp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilehashFieldNumber = 1,
    kFileNameFieldNumber = 2,
    kFileSizeFieldNumber = 3,
  };
  // string filehash = 1;
  void clear_filehash();
  const std::string& filehash() const;
  void set_filehash(const std::string& value);
  void set_filehash(std::string&& value);
  void set_filehash(const char* value);
  void set_filehash(const char* value, size_t size);
  std::string* mutable_filehash();
  std::string* release_filehash();
  void set_allocated_filehash(std::string* filehash);
  private:
  const std::string& _internal_filehash() const;
  void _internal_set_filehash(const std::string& value);
  std::string* _internal_mutable_filehash();
  public:

  // string fileName = 2;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // uint32 fileSize = 3;
  void clear_filesize();
  ::PROTOBUF_NAMESPACE_ID::uint32 filesize() const;
  void set_filesize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_filesize() const;
  void _internal_set_filesize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:BTL.FileInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filehash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::uint32 filesize_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_udp_2eproto;
};
// -------------------------------------------------------------------

class FileData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BTL.FileData) */ {
 public:
  FileData();
  virtual ~FileData();

  FileData(const FileData& from);
  FileData(FileData&& from) noexcept
    : FileData() {
    *this = ::std::move(from);
  }

  inline FileData& operator=(const FileData& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileData& operator=(FileData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileData* internal_default_instance() {
    return reinterpret_cast<const FileData*>(
               &_FileData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FileData& a, FileData& b) {
    a.Swap(&b);
  }
  inline void Swap(FileData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileData* New() const final {
    return CreateMaybeMessage<FileData>(nullptr);
  }

  FileData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileData& from);
  void MergeFrom(const FileData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BTL.FileData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_udp_2eproto);
    return ::descriptor_table_udp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 1,
    kDataFieldNumber = 3,
    kOffsetFieldNumber = 2,
  };
  // string fileName = 1;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint32 offset = 2;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::uint32 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:BTL.FileData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_udp_2eproto;
};
// -------------------------------------------------------------------

class FileCache :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BTL.FileCache) */ {
 public:
  FileCache();
  virtual ~FileCache();

  FileCache(const FileCache& from);
  FileCache(FileCache&& from) noexcept
    : FileCache() {
    *this = ::std::move(from);
  }

  inline FileCache& operator=(const FileCache& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileCache& operator=(FileCache&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileCache& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileCache* internal_default_instance() {
    return reinterpret_cast<const FileCache*>(
               &_FileCache_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FileCache& a, FileCache& b) {
    a.Swap(&b);
  }
  inline void Swap(FileCache* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileCache* New() const final {
    return CreateMaybeMessage<FileCache>(nullptr);
  }

  FileCache* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileCache>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileCache& from);
  void MergeFrom(const FileCache& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileCache* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BTL.FileCache";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_udp_2eproto);
    return ::descriptor_table_udp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCacheFieldNumber = 2,
    kIsSenderFieldNumber = 1,
  };
  // repeated uint32 cache = 2;
  int cache_size() const;
  private:
  int _internal_cache_size() const;
  public:
  void clear_cache();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cache(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_cache() const;
  void _internal_add_cache(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_cache();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 cache(int index) const;
  void set_cache(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_cache(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      cache() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_cache();

  // bool isSender = 1;
  void clear_issender();
  bool issender() const;
  void set_issender(bool value);
  private:
  bool _internal_issender() const;
  void _internal_set_issender(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BTL.FileCache)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > cache_;
  mutable std::atomic<int> _cache_cached_byte_size_;
  bool issender_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_udp_2eproto;
};
// -------------------------------------------------------------------

class ListFile :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BTL.ListFile) */ {
 public:
  ListFile();
  virtual ~ListFile();

  ListFile(const ListFile& from);
  ListFile(ListFile&& from) noexcept
    : ListFile() {
    *this = ::std::move(from);
  }

  inline ListFile& operator=(const ListFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListFile& operator=(ListFile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListFile* internal_default_instance() {
    return reinterpret_cast<const ListFile*>(
               &_ListFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ListFile& a, ListFile& b) {
    a.Swap(&b);
  }
  inline void Swap(ListFile* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListFile* New() const final {
    return CreateMaybeMessage<ListFile>(nullptr);
  }

  ListFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListFile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListFile& from);
  void MergeFrom(const ListFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListFile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BTL.ListFile";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_udp_2eproto);
    return ::descriptor_table_udp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFileFieldNumber = 2,
    kIsSenderFieldNumber = 1,
  };
  // string listFile = 2;
  void clear_listfile();
  const std::string& listfile() const;
  void set_listfile(const std::string& value);
  void set_listfile(std::string&& value);
  void set_listfile(const char* value);
  void set_listfile(const char* value, size_t size);
  std::string* mutable_listfile();
  std::string* release_listfile();
  void set_allocated_listfile(std::string* listfile);
  private:
  const std::string& _internal_listfile() const;
  void _internal_set_listfile(const std::string& value);
  std::string* _internal_mutable_listfile();
  public:

  // bool isSender = 1;
  void clear_issender();
  bool issender() const;
  void set_issender(bool value);
  private:
  bool _internal_issender() const;
  void _internal_set_issender(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BTL.ListFile)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr listfile_;
  bool issender_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_udp_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MessageType

// .BTL.MessageType.Message message = 1;
inline void MessageType::clear_message() {
  message_ = 0;
}
inline ::BTL::MessageType_Message MessageType::_internal_message() const {
  return static_cast< ::BTL::MessageType_Message >(message_);
}
inline ::BTL::MessageType_Message MessageType::message() const {
  // @@protoc_insertion_point(field_get:BTL.MessageType.message)
  return _internal_message();
}
inline void MessageType::_internal_set_message(::BTL::MessageType_Message value) {
  
  message_ = value;
}
inline void MessageType::set_message(::BTL::MessageType_Message value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:BTL.MessageType.message)
}

// uint32 localPort = 2;
inline void MessageType::clear_localport() {
  localport_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MessageType::_internal_localport() const {
  return localport_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MessageType::localport() const {
  // @@protoc_insertion_point(field_get:BTL.MessageType.localPort)
  return _internal_localport();
}
inline void MessageType::_internal_set_localport(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  localport_ = value;
}
inline void MessageType::set_localport(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_localport(value);
  // @@protoc_insertion_point(field_set:BTL.MessageType.localPort)
}

// -------------------------------------------------------------------

// HostInfo

// string host = 1;
inline void HostInfo::clear_host() {
  host_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HostInfo::host() const {
  // @@protoc_insertion_point(field_get:BTL.HostInfo.host)
  return _internal_host();
}
inline void HostInfo::set_host(const std::string& value) {
  _internal_set_host(value);
  // @@protoc_insertion_point(field_set:BTL.HostInfo.host)
}
inline std::string* HostInfo::mutable_host() {
  // @@protoc_insertion_point(field_mutable:BTL.HostInfo.host)
  return _internal_mutable_host();
}
inline const std::string& HostInfo::_internal_host() const {
  return host_.GetNoArena();
}
inline void HostInfo::_internal_set_host(const std::string& value) {
  
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void HostInfo::set_host(std::string&& value) {
  
  host_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BTL.HostInfo.host)
}
inline void HostInfo::set_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BTL.HostInfo.host)
}
inline void HostInfo::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BTL.HostInfo.host)
}
inline std::string* HostInfo::_internal_mutable_host() {
  
  return host_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HostInfo::release_host() {
  // @@protoc_insertion_point(field_release:BTL.HostInfo.host)
  
  return host_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HostInfo::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:BTL.HostInfo.host)
}

// uint32 port = 2;
inline void HostInfo::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HostInfo::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HostInfo::port() const {
  // @@protoc_insertion_point(field_get:BTL.HostInfo.port)
  return _internal_port();
}
inline void HostInfo::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void HostInfo::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:BTL.HostInfo.port)
}

// bool isSender = 3;
inline void HostInfo::clear_issender() {
  issender_ = false;
}
inline bool HostInfo::_internal_issender() const {
  return issender_;
}
inline bool HostInfo::issender() const {
  // @@protoc_insertion_point(field_get:BTL.HostInfo.isSender)
  return _internal_issender();
}
inline void HostInfo::_internal_set_issender(bool value) {
  
  issender_ = value;
}
inline void HostInfo::set_issender(bool value) {
  _internal_set_issender(value);
  // @@protoc_insertion_point(field_set:BTL.HostInfo.isSender)
}

// -------------------------------------------------------------------

// ClientInfo

// string remoteHost = 1;
inline void ClientInfo::clear_remotehost() {
  remotehost_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClientInfo::remotehost() const {
  // @@protoc_insertion_point(field_get:BTL.ClientInfo.remoteHost)
  return _internal_remotehost();
}
inline void ClientInfo::set_remotehost(const std::string& value) {
  _internal_set_remotehost(value);
  // @@protoc_insertion_point(field_set:BTL.ClientInfo.remoteHost)
}
inline std::string* ClientInfo::mutable_remotehost() {
  // @@protoc_insertion_point(field_mutable:BTL.ClientInfo.remoteHost)
  return _internal_mutable_remotehost();
}
inline const std::string& ClientInfo::_internal_remotehost() const {
  return remotehost_.GetNoArena();
}
inline void ClientInfo::_internal_set_remotehost(const std::string& value) {
  
  remotehost_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ClientInfo::set_remotehost(std::string&& value) {
  
  remotehost_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BTL.ClientInfo.remoteHost)
}
inline void ClientInfo::set_remotehost(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remotehost_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BTL.ClientInfo.remoteHost)
}
inline void ClientInfo::set_remotehost(const char* value, size_t size) {
  
  remotehost_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BTL.ClientInfo.remoteHost)
}
inline std::string* ClientInfo::_internal_mutable_remotehost() {
  
  return remotehost_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientInfo::release_remotehost() {
  // @@protoc_insertion_point(field_release:BTL.ClientInfo.remoteHost)
  
  return remotehost_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientInfo::set_allocated_remotehost(std::string* remotehost) {
  if (remotehost != nullptr) {
    
  } else {
    
  }
  remotehost_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remotehost);
  // @@protoc_insertion_point(field_set_allocated:BTL.ClientInfo.remoteHost)
}

// uint32 localPort = 2;
inline void ClientInfo::clear_localport() {
  localport_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClientInfo::_internal_localport() const {
  return localport_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClientInfo::localport() const {
  // @@protoc_insertion_point(field_get:BTL.ClientInfo.localPort)
  return _internal_localport();
}
inline void ClientInfo::_internal_set_localport(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  localport_ = value;
}
inline void ClientInfo::set_localport(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_localport(value);
  // @@protoc_insertion_point(field_set:BTL.ClientInfo.localPort)
}

// bool isSender = 3;
inline void ClientInfo::clear_issender() {
  issender_ = false;
}
inline bool ClientInfo::_internal_issender() const {
  return issender_;
}
inline bool ClientInfo::issender() const {
  // @@protoc_insertion_point(field_get:BTL.ClientInfo.isSender)
  return _internal_issender();
}
inline void ClientInfo::_internal_set_issender(bool value) {
  
  issender_ = value;
}
inline void ClientInfo::set_issender(bool value) {
  _internal_set_issender(value);
  // @@protoc_insertion_point(field_set:BTL.ClientInfo.isSender)
}

// repeated .BTL.HostInfo peers = 4;
inline int ClientInfo::_internal_peers_size() const {
  return peers_.size();
}
inline int ClientInfo::peers_size() const {
  return _internal_peers_size();
}
inline void ClientInfo::clear_peers() {
  peers_.Clear();
}
inline ::BTL::HostInfo* ClientInfo::mutable_peers(int index) {
  // @@protoc_insertion_point(field_mutable:BTL.ClientInfo.peers)
  return peers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BTL::HostInfo >*
ClientInfo::mutable_peers() {
  // @@protoc_insertion_point(field_mutable_list:BTL.ClientInfo.peers)
  return &peers_;
}
inline const ::BTL::HostInfo& ClientInfo::_internal_peers(int index) const {
  return peers_.Get(index);
}
inline const ::BTL::HostInfo& ClientInfo::peers(int index) const {
  // @@protoc_insertion_point(field_get:BTL.ClientInfo.peers)
  return _internal_peers(index);
}
inline ::BTL::HostInfo* ClientInfo::_internal_add_peers() {
  return peers_.Add();
}
inline ::BTL::HostInfo* ClientInfo::add_peers() {
  // @@protoc_insertion_point(field_add:BTL.ClientInfo.peers)
  return _internal_add_peers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BTL::HostInfo >&
ClientInfo::peers() const {
  // @@protoc_insertion_point(field_list:BTL.ClientInfo.peers)
  return peers_;
}

// -------------------------------------------------------------------

// FileInfo

// string filehash = 1;
inline void FileInfo::clear_filehash() {
  filehash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FileInfo::filehash() const {
  // @@protoc_insertion_point(field_get:BTL.FileInfo.filehash)
  return _internal_filehash();
}
inline void FileInfo::set_filehash(const std::string& value) {
  _internal_set_filehash(value);
  // @@protoc_insertion_point(field_set:BTL.FileInfo.filehash)
}
inline std::string* FileInfo::mutable_filehash() {
  // @@protoc_insertion_point(field_mutable:BTL.FileInfo.filehash)
  return _internal_mutable_filehash();
}
inline const std::string& FileInfo::_internal_filehash() const {
  return filehash_.GetNoArena();
}
inline void FileInfo::_internal_set_filehash(const std::string& value) {
  
  filehash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FileInfo::set_filehash(std::string&& value) {
  
  filehash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BTL.FileInfo.filehash)
}
inline void FileInfo::set_filehash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filehash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BTL.FileInfo.filehash)
}
inline void FileInfo::set_filehash(const char* value, size_t size) {
  
  filehash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BTL.FileInfo.filehash)
}
inline std::string* FileInfo::_internal_mutable_filehash() {
  
  return filehash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FileInfo::release_filehash() {
  // @@protoc_insertion_point(field_release:BTL.FileInfo.filehash)
  
  return filehash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FileInfo::set_allocated_filehash(std::string* filehash) {
  if (filehash != nullptr) {
    
  } else {
    
  }
  filehash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filehash);
  // @@protoc_insertion_point(field_set_allocated:BTL.FileInfo.filehash)
}

// string fileName = 2;
inline void FileInfo::clear_filename() {
  filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FileInfo::filename() const {
  // @@protoc_insertion_point(field_get:BTL.FileInfo.fileName)
  return _internal_filename();
}
inline void FileInfo::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:BTL.FileInfo.fileName)
}
inline std::string* FileInfo::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:BTL.FileInfo.fileName)
  return _internal_mutable_filename();
}
inline const std::string& FileInfo::_internal_filename() const {
  return filename_.GetNoArena();
}
inline void FileInfo::_internal_set_filename(const std::string& value) {
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FileInfo::set_filename(std::string&& value) {
  
  filename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BTL.FileInfo.fileName)
}
inline void FileInfo::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BTL.FileInfo.fileName)
}
inline void FileInfo::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BTL.FileInfo.fileName)
}
inline std::string* FileInfo::_internal_mutable_filename() {
  
  return filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FileInfo::release_filename() {
  // @@protoc_insertion_point(field_release:BTL.FileInfo.fileName)
  
  return filename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FileInfo::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:BTL.FileInfo.fileName)
}

// uint32 fileSize = 3;
inline void FileInfo::clear_filesize() {
  filesize_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FileInfo::_internal_filesize() const {
  return filesize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FileInfo::filesize() const {
  // @@protoc_insertion_point(field_get:BTL.FileInfo.fileSize)
  return _internal_filesize();
}
inline void FileInfo::_internal_set_filesize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  filesize_ = value;
}
inline void FileInfo::set_filesize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_filesize(value);
  // @@protoc_insertion_point(field_set:BTL.FileInfo.fileSize)
}

// -------------------------------------------------------------------

// FileData

// string fileName = 1;
inline void FileData::clear_filename() {
  filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FileData::filename() const {
  // @@protoc_insertion_point(field_get:BTL.FileData.fileName)
  return _internal_filename();
}
inline void FileData::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:BTL.FileData.fileName)
}
inline std::string* FileData::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:BTL.FileData.fileName)
  return _internal_mutable_filename();
}
inline const std::string& FileData::_internal_filename() const {
  return filename_.GetNoArena();
}
inline void FileData::_internal_set_filename(const std::string& value) {
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FileData::set_filename(std::string&& value) {
  
  filename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BTL.FileData.fileName)
}
inline void FileData::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BTL.FileData.fileName)
}
inline void FileData::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BTL.FileData.fileName)
}
inline std::string* FileData::_internal_mutable_filename() {
  
  return filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FileData::release_filename() {
  // @@protoc_insertion_point(field_release:BTL.FileData.fileName)
  
  return filename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FileData::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:BTL.FileData.fileName)
}

// uint32 offset = 2;
inline void FileData::clear_offset() {
  offset_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FileData::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FileData::offset() const {
  // @@protoc_insertion_point(field_get:BTL.FileData.offset)
  return _internal_offset();
}
inline void FileData::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  offset_ = value;
}
inline void FileData::set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:BTL.FileData.offset)
}

// bytes data = 3;
inline void FileData::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FileData::data() const {
  // @@protoc_insertion_point(field_get:BTL.FileData.data)
  return _internal_data();
}
inline void FileData::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:BTL.FileData.data)
}
inline std::string* FileData::mutable_data() {
  // @@protoc_insertion_point(field_mutable:BTL.FileData.data)
  return _internal_mutable_data();
}
inline const std::string& FileData::_internal_data() const {
  return data_.GetNoArena();
}
inline void FileData::_internal_set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FileData::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BTL.FileData.data)
}
inline void FileData::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BTL.FileData.data)
}
inline void FileData::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BTL.FileData.data)
}
inline std::string* FileData::_internal_mutable_data() {
  
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FileData::release_data() {
  // @@protoc_insertion_point(field_release:BTL.FileData.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FileData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:BTL.FileData.data)
}

// -------------------------------------------------------------------

// FileCache

// bool isSender = 1;
inline void FileCache::clear_issender() {
  issender_ = false;
}
inline bool FileCache::_internal_issender() const {
  return issender_;
}
inline bool FileCache::issender() const {
  // @@protoc_insertion_point(field_get:BTL.FileCache.isSender)
  return _internal_issender();
}
inline void FileCache::_internal_set_issender(bool value) {
  
  issender_ = value;
}
inline void FileCache::set_issender(bool value) {
  _internal_set_issender(value);
  // @@protoc_insertion_point(field_set:BTL.FileCache.isSender)
}

// repeated uint32 cache = 2;
inline int FileCache::_internal_cache_size() const {
  return cache_.size();
}
inline int FileCache::cache_size() const {
  return _internal_cache_size();
}
inline void FileCache::clear_cache() {
  cache_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FileCache::_internal_cache(int index) const {
  return cache_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FileCache::cache(int index) const {
  // @@protoc_insertion_point(field_get:BTL.FileCache.cache)
  return _internal_cache(index);
}
inline void FileCache::set_cache(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  cache_.Set(index, value);
  // @@protoc_insertion_point(field_set:BTL.FileCache.cache)
}
inline void FileCache::_internal_add_cache(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  cache_.Add(value);
}
inline void FileCache::add_cache(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_cache(value);
  // @@protoc_insertion_point(field_add:BTL.FileCache.cache)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
FileCache::_internal_cache() const {
  return cache_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
FileCache::cache() const {
  // @@protoc_insertion_point(field_list:BTL.FileCache.cache)
  return _internal_cache();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
FileCache::_internal_mutable_cache() {
  return &cache_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
FileCache::mutable_cache() {
  // @@protoc_insertion_point(field_mutable_list:BTL.FileCache.cache)
  return _internal_mutable_cache();
}

// -------------------------------------------------------------------

// ListFile

// bool isSender = 1;
inline void ListFile::clear_issender() {
  issender_ = false;
}
inline bool ListFile::_internal_issender() const {
  return issender_;
}
inline bool ListFile::issender() const {
  // @@protoc_insertion_point(field_get:BTL.ListFile.isSender)
  return _internal_issender();
}
inline void ListFile::_internal_set_issender(bool value) {
  
  issender_ = value;
}
inline void ListFile::set_issender(bool value) {
  _internal_set_issender(value);
  // @@protoc_insertion_point(field_set:BTL.ListFile.isSender)
}

// string listFile = 2;
inline void ListFile::clear_listfile() {
  listfile_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListFile::listfile() const {
  // @@protoc_insertion_point(field_get:BTL.ListFile.listFile)
  return _internal_listfile();
}
inline void ListFile::set_listfile(const std::string& value) {
  _internal_set_listfile(value);
  // @@protoc_insertion_point(field_set:BTL.ListFile.listFile)
}
inline std::string* ListFile::mutable_listfile() {
  // @@protoc_insertion_point(field_mutable:BTL.ListFile.listFile)
  return _internal_mutable_listfile();
}
inline const std::string& ListFile::_internal_listfile() const {
  return listfile_.GetNoArena();
}
inline void ListFile::_internal_set_listfile(const std::string& value) {
  
  listfile_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ListFile::set_listfile(std::string&& value) {
  
  listfile_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BTL.ListFile.listFile)
}
inline void ListFile::set_listfile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  listfile_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BTL.ListFile.listFile)
}
inline void ListFile::set_listfile(const char* value, size_t size) {
  
  listfile_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BTL.ListFile.listFile)
}
inline std::string* ListFile::_internal_mutable_listfile() {
  
  return listfile_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListFile::release_listfile() {
  // @@protoc_insertion_point(field_release:BTL.ListFile.listFile)
  
  return listfile_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListFile::set_allocated_listfile(std::string* listfile) {
  if (listfile != nullptr) {
    
  } else {
    
  }
  listfile_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), listfile);
  // @@protoc_insertion_point(field_set_allocated:BTL.ListFile.listFile)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace BTL

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::BTL::MessageType_Message> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BTL::MessageType_Message>() {
  return ::BTL::MessageType_Message_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_udp_2eproto
